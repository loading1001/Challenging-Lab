


Task 1. Create the lab resources

------------------
# <Copy this thing>
------------------

gcloud services enable container.googleapis.com \
    cloudbuild.googleapis.com \
    sourcerepo.googleapis.com

----------
Paste in terminal(cloud shell)
----------
# <Copy this thing>
------------------

export PROJECT_ID=$(gcloud config get-value project)
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $PROJECT_ID \
--format="value(projectNumber)")@cloudbuild.gserviceaccount.com --role="roles/container.developer"

----------
Paste in terminal(cloud shell)
----------

git config --global user.email <Profile email>

git config --global user.name student

export PROJECT_ID=
export CLUSTER_NAME=
export ZONE=
export REGION=
export REPO=

gcloud artifacts repositories create $REPO \
    --repository-format=docker \
    --location=$REGION \
    --description="Subscribe to quicklab"

gcloud beta container --project "$PROJECT_ID" clusters create "$CLUSTER_NAME" --zone "$ZONE" --no-enable-basic-auth --cluster-version latest --release-channel "regular" --machine-type "e2-medium" --image-type "COS_CONTAINERD" --disk-type "pd-balanced" --disk-size "100" --metadata disable-legacy-endpoints=true  --logging=SYSTEM,WORKLOAD --monitoring=SYSTEM --enable-ip-alias --network "projects/$PROJECT_ID/global/networks/default" --subnetwork "projects/$PROJECT_ID/regions/$REGION/subnetworks/default" --no-enable-intra-node-visibility --default-max-pods-per-node "110" --enable-autoscaling --min-nodes "2" --max-nodes "6" --location-policy "BALANCED" --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver --enable-autoupgrade --enable-autorepair --max-surge-upgrade 1 --max-unavailable-upgrade 0 --enable-shielded-nodes --node-locations "$ZONE"


kubectl create namespace prod	

kubectl create namespace dev


TASK2. Create a repository in Cloud Source Repositories


gcloud source repos create sample-app

git clone https://source.developers.google.com/p/$PROJECT_ID/r/sample-app


cd ~
gsutil cp -r gs://spls/gsp330/sample-app/* sample-app



## You have to run this command as well because lab is updated 

for file in sample-app/cloudbuild-dev.yaml sample-app/cloudbuild.yaml; do
    sed -i "s/<your-region>/${REGION}/g" "$file"
    sed -i "s/<your-zone>/${ZONE}/g" "$file"
done


git init
cd sample-app/
git add .
git commit -m "Subscribe to quicklab" 
git push -u origin master



git branch dev
git checkout dev
git push -u origin dev
-------------------------------------------------------------------------------------------------------------------------------------------------------

               TASK3:- Create the Cloud Build Triggers

               <Completely manunal> 
               Create a Cloud Build Trigger named sample-app-prod-deploy that with the following configurations:
               Event: Push to a branch
               Source Repository: sample-app
               Branch: ^master$
               Cloud Build Configuration File: cloudbuild.yaml>
-------------------------------------------------------------------------------------------------------------------------------------------------------

TASK 4:- Deploy the first versions of the application 
####### LAB IS Tough from here #######################

COMMIT_ID="$(git rev-parse --short=7 HEAD)"
gcloud builds submit --tag="${REGION}-docker.pkg.dev/${PROJECT_ID}/$REPO/hello-cloudbuild:${COMMIT_ID}" .

-------------------
# <OPEN EDITOR>
step1: First go in sample app -> do changes in cloudbuild-dev.yaml -> then change version at two places -> v1.0
step2:: go in dev then go in deployment.yaml -> do changes in Images: <long url of image from last used command in task4 in terminal>
-------------------
git add .
git commit -m "Subscribe to quicklab" 
git push -u origin dev

git checkout master

------------------
# <Open Editor>
step1: go to sample app -> do changes in cloudbuild.yaml-> then change version at two places -> v1.0
step2: go in prod folder then go in deployment.yaml -> do changes in Images: <long url of image from last used command in task4 in terminal>
------------------

git add .
git commit -m "Subscribe to quicklab" 
git push -u origin master
---------------------------------------------------------------------------------------------------------------------------------------------------------


TASK 5: Deploy the second versions of the application

git checkout dev

-------------------
# <COPY this Thing>
-------------------

func main() {
	http.HandleFunc("/blue", blueHandler)
	http.HandleFunc("/red", redHandler)
	http.ListenAndServe(":8080", nil)
}

------------------
# <Open Editor>
Step1: Go to main.go and make the changes in func main(select and paste copied one)
------------------
# <Copy this thing>
------------------

func redHandler(w http.ResponseWriter, r *http.Request) {
	img := image.NewRGBA(image.Rect(0, 0, 100, 100))
	draw.Draw(img, img.Bounds(), &image.Uniform{color.RGBA{255, 0, 0, 255}}, image.ZP, draw.Src)
	w.Header().Set("Content-Type", "image/png")
	png.Encode(w, img)
}

----------------- 
# <Open Editor>
Step2: Paste in main.go file after all function
step3: do changes in cloudbuild-dev.yaml -> then change version at two places -> v2.0
step4: go to dev in deployment.yaml -> do changes in IMAGE url in last of the url after colon remove and write v1.0
-----------------

git add .
git commit -m "Subscribe to quicklab" 
git push -u origin dev

git checkout master



---------------------------------------
Build the second production deployment
# <Copy this thing>
------------------

func main() {
	http.HandleFunc("/blue", blueHandler)
	http.HandleFunc("/red", redHandler)
	http.ListenAndServe(":8080", nil)
}

------------------
# <Open Editor>
Step1: Go to main.go and make the changes in func main(select and paste copied one)
------------------
# <Copy this thing>
------------------

func redHandler(w http.ResponseWriter, r *http.Request) {
	img := image.NewRGBA(image.Rect(0, 0, 100, 100))
	draw.Draw(img, img.Bounds(), &image.Uniform{color.RGBA{255, 0, 0, 255}}, image.ZP, draw.Src)
	w.Header().Set("Content-Type", "image/png")
	png.Encode(w, img)
}

----------------- 
# <Open Editor>
Step2: Paste in main.go file after all function
Step3: go to sample app -> do changes in cloudbuild.yaml-> then change version at two places -> v2.0
Step4: Go to prod -> and do changes deployement file -> do changes in IMAGE url in last of the url after colon remove and write v1.0
-----------------

git add .
git commit -m "Subscribe to quicklab" 
git push -u origin master



# First click on task 5 when it show its completed then follow below steps

Step: go to trigger option in console then click on history option then click on second option which is basically dev branch- > then click on that then
click rebuild option




